/*
    程序员小明打了一辆出租车去上班。出于职业敏感，他注意到这辆出租车的计费表有点问题，总是偏大。
  出租车司机解释说他不喜欢数字4，所以改装了计费表，任何数字位置遇到数字4就直接跳过，其余功能都正常。
  比如：
    1. 23再多一块钱就变为25；
    2. 39再多一块钱变为50；
    3. 399再多一块钱变为500；
    小明识破了司机的伎俩，准备利用自己的学识打败司机的阴谋。
    给出计费表的表面读数，返回实际产生的费用。

    输入描述:
      只有一行，数字N，表示里程表的读数。
      (1<=N<=888888888)。
    输出描述:
      一个数字，表示实际产生的费用。以回车结束。
    示例1：
    输入
      5
    输出
      4
    说明
      5表示计费表的表面读数。
      表示实际产生的费用其实只有4块钱。

    示例2：
    输入
      17
    输出
      15
    说明
      17表示计费表的表面读数。
      15表示实际产生的费用其实只有15块钱。
    示例3：
    输入
      100
    输出
      81
    说明：100表示计费表的表面读数，81表示实际产生的费用其实只有81块钱
   */

// 题解：https://blog.nowcoder.net/n/6922337ec64b4acf84c92ad902b24719
// 4的个数：

// 10以内：0*9+1=1 个
// 100以内：1*9+10=19个（9个1-10范围内含4的数，也即{4,14,24,34,54,64,74,84,94}再加上{40~49}）
// 1000以内：19*9+100=271个（9个1-100范围内含4的数，再加上{400~499}集合内的100个数）
// 10000以内：271*9+1000=3439个（9个1-1000范围内含4的数，再加上{4000~4999}集合内的1000个数）
// https://blog.csdn.net/csdnliwenqi/article/details/116715845
function solution(n) {
    let N = n
    let sum = 0 // 跳过的4总个数
    let ten = 1 // 1表示10以内的{4} 10表示100以内的{40~49} 100表示1000以内的{400~499} 
    let four = 0 // 0，1，19，271，...
    while (n > 0) {
        if (n % 10 > 4) {
            sum += (n % 10 - 1) * four + ten
        } else {
            sum += (n % 10) * four
        }
        four = four * 9 + ten
        ten *= 10
        n = Math.floor(n / 10)
    }
    return N - sum
}

console.log(solution(100))